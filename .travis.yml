language: C
services:
  - docker

#Global variables; note this will not trigger job replication
env:
  global:
    - BUILD_DOCKER_FILE_UBUNTU_BIONIC=ci/Dockerfile-ubuntu-bionic-for-pmacct
    - BUILD_DOCKER_TAG_UBUNTU_BIONIC=ci/ubuntu-bionic-for-pmacct
    - BUILD_DOCKER_FILE_CENTOS_8_1=ci/Dockerfile-centos-8.1-for-pmacct
    - BUILD_DOCKER_TAG_CENTOS_8_1=ci/centos8.1-for-pmacct

#Matrix of jobs
jobs:
  include:
  ##Build stage
  - docker_build_ubuntu:
    name: Build docker image for Ubuntu Bionic
    stage: docker
    workspaces:
      create:
        name: docker_ubuntu_bionic
        paths:
          - /tmp/docker/
    script:
      - docker build -f $BUILD_DOCKER_FILE_UBUNTU_BIONIC -t $BUILD_DOCKER_TAG_UBUNTU_BIONIC .
      - mkdir -p /tmp/docker/
      - docker save -o /tmp/docker/registry.tar $BUILD_DOCKER_TAG_UBUNTU_BIONIC
  - docker_build_centos:
    name: Build docker image for Centos 8.1
    stage: docker
    workspaces:
      create:
        name: docker_centos_8_1
        paths:
          - /tmp/docker/
    script:
      - docker build -f $BUILD_DOCKER_FILE_CENTOS_8_1 -t $BUILD_DOCKER_TAG_CENTOS_8_1 .
      - mkdir -p /tmp/docker/
      - docker save -o /tmp/docker/registry.tar $BUILD_DOCKER_TAG_CENTOS_8_1

  #Test

  ###Ubuntu Bionic

  #Note to generate the names use this regex:
  #%s/env: CONFIG_FLAGS="\(.*\)"/name: "docker: Ubuntu Bionic, (CONFIG_FLAGS=\1)"\r    env: CONFIG_FLAGS="\1"/gc 
  - &build_test_ubuntu_bionic
    stage: build_test
    workspaces:
      use: docker_ubuntu_bionic
    script:
      - docker load -i /tmp/docker/registry.tar
      - CONTAINER_ID=$(docker run --rm -it -d -v `pwd`:`pwd` -w `pwd` -e CONFIG_FLAGS $BUILD_DOCKER_TAG_UBUNTU_BIONIC:latest)
      - echo "Launched container id:" $CONTAINER_ID
      - docker exec -i $CONTAINER_ID ./ci/script.sh
      - docker stop $CONTAINER_ID
    name: "docker: Ubuntu Bionic, CONFIG_FLAGS=--enable-debug --enable-mysql --enable-pgsql --enable-sqlite3 --enable-kafka --enable-geoipv2 --enable-jansson --enable-rabbitmq --enable-nflog --enable-ndpi --enable-zmq --enable-avro --enable-serdes --enable-redis"
    env: CONFIG_FLAGS="--enable-debug --enable-mysql --enable-pgsql --enable-sqlite3 --enable-kafka --enable-geoipv2 --enable-jansson --enable-rabbitmq --enable-nflog --enable-ndpi --enable-zmq --enable-avro --enable-serdes --enable-redis"

  - <<: *build_test_ubuntu_bionic
    name: "docker: Ubuntu Bionic, CONFIG_FLAGS=--enable-mysql --enable-pgsql --enable-sqlite3 --enable-kafka --enable-geoipv2 --enable-jansson --enable-rabbitmq --enable-nflog --enable-ndpi --enable-zmq --enable-avro --enable-serdes --enable-redis"
    env: CONFIG_FLAGS="--enable-mysql --enable-pgsql --enable-sqlite3 --enable-kafka --enable-geoipv2 --enable-jansson --enable-rabbitmq --enable-nflog --enable-ndpi --enable-zmq --enable-avro --enable-serdes --enable-redis"

  - <<: *build_test_ubuntu_bionic
    name: "docker: Ubuntu Bionic, CONFIG_FLAGS=--enable-debug --enable-jansson --enable-zmq --enable-kafka"
    env: CONFIG_FLAGS="--enable-debug --enable-jansson --enable-zmq --enable-kafka"

  - <<: *build_test_ubuntu_bionic
    name: "docker: Ubuntu Bionic, CONFIG_FLAGS=--enable-jansson --enable-zmq --enable-kafka"
    env: CONFIG_FLAGS="--enable-jansson --enable-zmq --enable-kafka"

  - <<: *build_test_ubuntu_bionic
    name: "docker: Ubuntu Bionic, CONFIG_FLAGS=--enable-debug --enable-jansson --enable-zmq"
    env: CONFIG_FLAGS="--enable-debug --enable-jansson --enable-zmq"

  - <<: *build_test_ubuntu_bionic
    name: "docker: Ubuntu Bionic, CONFIG_FLAGS=--enable-jansson --enable-zmq"
    env: CONFIG_FLAGS="--enable-jansson --enable-zmq"

  - <<: *build_test_ubuntu_bionic
    name: "docker: Ubuntu Bionic, CONFIG_FLAGS=--enable-debug --enable-jansson --enable-kafka --enable-avro --enable-serdes"
    env: CONFIG_FLAGS="--enable-debug --enable-jansson --enable-kafka --enable-avro --enable-serdes"

  - <<: *build_test_ubuntu_bionic
    name: "docker: Ubuntu Bionic, CONFIG_FLAGS=--enable-jansson --enable-kafka --enable-avro --enable-serdes"
    env: CONFIG_FLAGS="--enable-jansson --enable-kafka --enable-avro --enable-serdes"

  - <<: *build_test_ubuntu_bionic
    name: "docker: Ubuntu Bionic, CONFIG_FLAGS=--enable-debug --enable-jansson --enable-kafka"
    env: CONFIG_FLAGS="--enable-debug --enable-jansson --enable-kafka"

  - <<: *build_test_ubuntu_bionic
    name: "docker: Ubuntu Bionic, CONFIG_FLAGS=--enable-jansson --enable-kafka"
    env: CONFIG_FLAGS="--enable-jansson --enable-kafka"

  - <<: *build_test_ubuntu_bionic
    name: "docker: Ubuntu Bionic, CONFIG_FLAGS=--enable-debug --enable-zmq"
    env: CONFIG_FLAGS="--enable-debug --enable-zmq"

  - <<: *build_test_ubuntu_bionic
    name: "docker: Ubuntu Bionic, CONFIG_FLAGS=--enable-zmq"
    env: CONFIG_FLAGS="--enable-zmq"

  - <<: *build_test_ubuntu_bionic
    name: "docker: Ubuntu Bionic, CONFIG_FLAGS=--enable-debug --enable-jansson"
    env: CONFIG_FLAGS="--enable-debug --enable-jansson"

  - <<: *build_test_ubuntu_bionic
    name: "docker: Ubuntu Bionic, CONFIG_FLAGS=--enable-jansson"
    env: CONFIG_FLAGS="--enable-jansson"

  - <<: *build_test_ubuntu_bionic
    name: "docker: Ubuntu Bionic, CONFIG_FLAGS=--enable-debug"
    env: CONFIG_FLAGS="--enable-debug"

  - <<: *build_test_ubuntu_bionic
    name: "docker: Ubuntu Bionic, CONFIG_FLAGS="
    env: CONFIG_FLAGS=""

  ##CENTOS 8.1
  - &build_test_centos_8_1
    stage: build_test
    workspaces:
      use: docker_centos_8_1
    script:
      - docker load -i /tmp/docker/registry.tar
      - CONTAINER_ID=$(docker run --rm -it -d -v `pwd`:`pwd` -w `pwd` -e CONFIG_FLAGS $BUILD_DOCKER_TAG_CENTOS_8_1:latest)
      - echo "Launched container id:" $CONTAINER_ID
      - docker exec -i $CONTAINER_ID ./ci/script.sh
      - docker stop $CONTAINER_ID

###
### Note missing libnetfilter_log in Centos8
###

    #name: "docker: Centos 8.1, CONFIG_FLAGS=--enable-debug --enable-mysql --enable-pgsql --enable-sqlite3 --enable-kafka --enable-geoipv2 --enable-jansson --enable-rabbitmq --enable-nflog --enable-ndpi --enable-zmq --enable-avro --enable-serdes --enable-redis"
    #env: CONFIG_FLAGS="--enable-debug --enable-mysql --enable-pgsql --enable-sqlite3 --enable-kafka --enable-geoipv2 --enable-jansson --enable-rabbitmq --enable-nflog --enable-ndpi --enable-zmq --enable-avro --enable-serdes --enable-redis"

  #- <<: *build_test_centos_8_1
  #  name: "docker: Centos 8.1, CONFIG_FLAGS=--enable-mysql --enable-pgsql --enable-sqlite3 --enable-kafka --enable-geoipv2 --enable-jansson --enable-rabbitmq --enable-nflog --enable-ndpi --enable-zmq --enable-avro --enable-serdes --enable-redis"
  #  env: CONFIG_FLAGS="--enable-mysql --enable-pgsql --enable-sqlite3 --enable-kafka --enable-geoipv2 --enable-jansson --enable-rabbitmq --enable-nflog --enable-ndpi --enable-zmq --enable-avro --enable-serdes --enable-redis"

  #- <<: *build_test_centos_8_1

    name: "docker: Centos 8.1, CONFIG_FLAGS=--enable-debug --enable-jansson --enable-zmq --enable-kafka"
    env: CONFIG_FLAGS="--enable-debug --enable-jansson --enable-zmq --enable-kafka"

  - <<: *build_test_centos_8_1
    name: "docker: Centos 8.1, CONFIG_FLAGS=--enable-jansson --enable-zmq --enable-kafka"
    env: CONFIG_FLAGS="--enable-jansson --enable-zmq --enable-kafka"

  - <<: *build_test_centos_8_1
    name: "docker: Centos 8.1, CONFIG_FLAGS=--enable-debug --enable-jansson --enable-zmq"
    env: CONFIG_FLAGS="--enable-debug --enable-jansson --enable-zmq"

  - <<: *build_test_centos_8_1
    name: "docker: Centos 8.1, CONFIG_FLAGS=--enable-jansson --enable-zmq"
    env: CONFIG_FLAGS="--enable-jansson --enable-zmq"

  - <<: *build_test_centos_8_1
    name: "docker: Centos 8.1, CONFIG_FLAGS=--enable-debug --enable-jansson --enable-kafka --enable-avro --enable-serdes"
    env: CONFIG_FLAGS="--enable-debug --enable-jansson --enable-kafka --enable-avro --enable-serdes"

  - <<: *build_test_centos_8_1
    name: "docker: Centos 8.1, CONFIG_FLAGS=--enable-jansson --enable-kafka --enable-avro --enable-serdes"
    env: CONFIG_FLAGS="--enable-jansson --enable-kafka --enable-avro --enable-serdes"

  - <<: *build_test_centos_8_1
    name: "docker: Centos 8.1, CONFIG_FLAGS=--enable-debug --enable-jansson --enable-kafka"
    env: CONFIG_FLAGS="--enable-debug --enable-jansson --enable-kafka"

  - <<: *build_test_centos_8_1
    name: "docker: Centos 8.1, CONFIG_FLAGS=--enable-jansson --enable-kafka"
    env: CONFIG_FLAGS="--enable-jansson --enable-kafka"

  - <<: *build_test_centos_8_1
    name: "docker: Centos 8.1, CONFIG_FLAGS=--enable-debug --enable-zmq"
    env: CONFIG_FLAGS="--enable-debug --enable-zmq"

  - <<: *build_test_centos_8_1
    name: "docker: Centos 8.1, CONFIG_FLAGS=--enable-zmq"
    env: CONFIG_FLAGS="--enable-zmq"

  - <<: *build_test_centos_8_1
    name: "docker: Centos 8.1, CONFIG_FLAGS=--enable-debug --enable-jansson"
    env: CONFIG_FLAGS="--enable-debug --enable-jansson"

  - <<: *build_test_centos_8_1
    name: "docker: Centos 8.1, CONFIG_FLAGS=--enable-jansson"
    env: CONFIG_FLAGS="--enable-jansson"

  - <<: *build_test_centos_8_1
    name: "docker: Centos 8.1, CONFIG_FLAGS=--enable-debug"
    env: CONFIG_FLAGS="--enable-debug"

  - <<: *build_test_centos_8_1
    name: "docker: Centos 8.1, CONFIG_FLAGS="
    env: CONFIG_FLAGS=""

  ## User docker containers
  - docker_hub_base:
    stage: docker_hub
    name: "docker_hub: base container"
    env: PMACCT_VERSION=$(git describe --abbrev=0 --match="v*")
    if: type NOT IN (pull_request)
    script:
      - echo "Building the base container..."
      - docker build -f docker/base/Dockerfile -t base:_build .
      - echo "Building daemon containers..."
      - docker build -f docker/pmacctd/Dockerfile -t pmacctd:_build .
      - docker build -f docker/nfacctd/Dockerfile -t nfacctd:_build .
      - docker build -f docker/sfacctd/Dockerfile -t sfacctd:_build .
      - docker build -f docker/uacctd/Dockerfile -t uacctd:_build .
      - docker build -f docker/pmbgpd/Dockerfile -t pmbgpd:_build .
      - docker build -f docker/pmbmpd/Dockerfile -t pmbmpd:_build .
      - docker build -f docker/pmtelemetryd/Dockerfile -t pmtelemetryd:_build .
      - echo "Uploading to dockerhub ...";
      - echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin;

      #Always push bleeding-edge when pushed to master
      - GIT_IS_BLEEDING_EDGE=$( (git branch --contains HEAD | grep master ) || echo "")
      - |
        if [ "$GIT_IS_BLEEDING_EDGE" != "" ]; then
          echo "Uploading 'bleeding-edge' tag for `git describe`...";
          docker tag base:_build ${DOCKER_USERNAME}/base:bleeding-edge;
          docker push ${DOCKER_USERNAME}/base:bleeding-edge;
          docker tag pmacctd:_build ${DOCKER_USERNAME}/pmacctd:bleeding-edge;
          docker push ${DOCKER_USERNAME}/pmacctd:bleeding-edge;
          docker tag nfacctd:_build ${DOCKER_USERNAME}/nfacctd:bleeding-edge;
          docker push ${DOCKER_USERNAME}/nfacctd:bleeding-edge;
          docker tag sfacctd:_build ${DOCKER_USERNAME}/sfacctd:bleeding-edge;
          docker push ${DOCKER_USERNAME}/sfacctd:bleeding-edge;
          docker tag uacctd:_build ${DOCKER_USERNAME}/uacctd:bleeding-edge;
          docker push ${DOCKER_USERNAME}/uacctd:bleeding-edge;
          docker tag pmbgpd:_build ${DOCKER_USERNAME}/pmbgpd:bleeding-edge;
          docker push ${DOCKER_USERNAME}/pmbgpd:bleeding-edge;
          docker tag pmbmpd:_build ${DOCKER_USERNAME}/pmbmpd:bleeding-edge;
          docker push ${DOCKER_USERNAME}/pmbmpd:bleeding-edge;
          docker tag pmtelemetryd:_build ${DOCKER_USERNAME}/pmtelemetryd:bleeding-edge;
          docker push ${DOCKER_USERNAME}/pmtelemetryd:bleeding-edge;
        fi

      #Upload vX.Y.Z only of it's a release commit
      - GIT_RELEASE_TAG=$(git describe --exact-match --match "v*" || echo "")
      - |
        if [ "$GIT_RELEASE_TAG" != "" ]; then
          echo "Uploading '$PMACCT_VERSION' tag for `git describe`...";
          docker tag base:_build ${DOCKER_USERNAME}/base:${PMACCT_VERSION};
          docker push ${DOCKER_USERNAME}/base:${PMACCT_VERSION};
          docker tag pmacctd:_build ${DOCKER_USERNAME}/pmacctd:${PMACCT_VERSION};
          docker push ${DOCKER_USERNAME}/pmacctd:${PMACCT_VERSION};
          docker tag nfacctd:_build ${DOCKER_USERNAME}/nfacctd:${PMACCT_VERSION};
          docker push ${DOCKER_USERNAME}/nfacctd:${PMACCT_VERSION};
          docker tag sfacctd:_build ${DOCKER_USERNAME}/sfacctd:${PMACCT_VERSION};
          docker push ${DOCKER_USERNAME}/sfacctd:${PMACCT_VERSION};
          docker tag uacctd:_build ${DOCKER_USERNAME}/uacctd:${PMACCT_VERSION};
          docker push ${DOCKER_USERNAME}/uacctd:${PMACCT_VERSION};
          docker tag pmbgpd:_build ${DOCKER_USERNAME}/pmbgpd:${PMACCT_VERSION};
          docker push ${DOCKER_USERNAME}/pmbgpd:${PMACCT_VERSION};
          docker tag pmbmpd:_build ${DOCKER_USERNAME}/pmbmpd:${PMACCT_VERSION};
          docker push ${DOCKER_USERNAME}/pmbmpd:${PMACCT_VERSION};
          docker tag pmtelemetryd:_build ${DOCKER_USERNAME}/pmtelemetryd:${PMACCT_VERSION};
          docker push ${DOCKER_USERNAME}/pmtelemetryd:${PMACCT_VERSION};
        fi

      #Upload "latest" if the release version is the highest
      - |
        if [ "$GIT_RELEASE_TAG" != "" ]; then
          GIT_LAST_TAG=$(git tag --sort=v:refname | tail -n 1);
          if [ "$GIT_RELEASE_TAG" == "$GIT_LAST_TAG" ]; then
            echo "Uploading 'latest' tag for `git describe`...";
            docker tag base:_build ${DOCKER_USERNAME}/base:latest;
            docker push ${DOCKER_USERNAME}/base:latest;
            docker tag pmacctd:_build ${DOCKER_USERNAME}/pmacctd:latest;
            docker push ${DOCKER_USERNAME}/pmacctd:latest;
            docker tag nfacctd:_build ${DOCKER_USERNAME}/nfacctd:latest;
            docker push ${DOCKER_USERNAME}/nfacctd:latest;
            docker tag sfacctd:_build ${DOCKER_USERNAME}/sfacctd:latest;
            docker push ${DOCKER_USERNAME}/sfacctd:latest;
            docker tag uacctd:_build ${DOCKER_USERNAME}/uacctd:latest;
            docker push ${DOCKER_USERNAME}/uacctd:latest;
            docker tag pmbgpd:_build ${DOCKER_USERNAME}/pmbgpd:latest;
            docker push ${DOCKER_USERNAME}/pmbgpd:latest;
            docker tag pmbmpd:_build ${DOCKER_USERNAME}/pmbmpd:latest;
            docker push ${DOCKER_USERNAME}/pmbmpd:latest;
            docker tag pmtelemetryd:_build ${DOCKER_USERNAME}/pmtelemetryd:latest;
            docker push ${DOCKER_USERNAME}/pmtelemetryd:latest;
          fi
        fi
